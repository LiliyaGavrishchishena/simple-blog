{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport types from './types';\nconst init = {\n  posts: [],\n  post: {}\n};\n\nfunction postsReducer(state = init, {\n  type,\n  payload\n}) {\n  switch (type) {\n    case types.GET_ALL_POSTS:\n      return _objectSpread({}, state, {\n        posts: [...payload.reverse()]\n      });\n\n    case types.GET_POST:\n      return _objectSpread({}, state, {\n        post: payload\n      });\n\n    case types.ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...posts]\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default postsReducer;","map":{"version":3,"sources":["C:/Users/Liliya/Desktop/frontend/simple-blog/store/posts/reducers.js"],"names":["types","init","posts","post","postsReducer","state","type","payload","GET_ALL_POSTS","reverse","GET_POST","ADD_POST"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AAEA,MAAMC,IAAI,GAAG;AACXC,EAAAA,KAAK,EAAE,EADI;AAEXC,EAAAA,IAAI,EAAE;AAFK,CAAb;;AAKA,SAASC,YAAT,CAAsBC,KAAK,GAAGJ,IAA9B,EAAoC;AAAEK,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAApC,EAAuD;AACrD,UAAQD,IAAR;AACE,SAAKN,KAAK,CAACQ,aAAX;AACE,+BAAYH,KAAZ;AAAmBH,QAAAA,KAAK,EAAE,CAAC,GAAGK,OAAO,CAACE,OAAR,EAAJ;AAA1B;;AACF,SAAKT,KAAK,CAACU,QAAX;AACE,+BAAYL,KAAZ;AAAmBF,QAAAA,IAAI,EAAEI;AAAzB;;AACF,SAAKP,KAAK,CAACW,QAAX;AACE,+BAAYN,KAAZ;AAAmBH,QAAAA,KAAK,EAAE,CAACK,OAAD,EAAU,GAAGL,KAAb;AAA1B;;AACF;AACE,aAAOG,KAAP;AARJ;AAUD;;AAED,eAAeD,YAAf","sourcesContent":["import types from './types';\r\n\r\nconst init = {\r\n  posts: [],\r\n  post: {},\r\n};\r\n\r\nfunction postsReducer(state = init, { type, payload }) {\r\n  switch (type) {\r\n    case types.GET_ALL_POSTS:\r\n      return { ...state, posts: [...payload.reverse()] };\r\n    case types.GET_POST:\r\n      return { ...state, post: payload };\r\n    case types.ADD_POST:\r\n      return { ...state, posts: [payload, ...posts] };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default postsReducer;\r\n"]},"metadata":{},"sourceType":"module"}