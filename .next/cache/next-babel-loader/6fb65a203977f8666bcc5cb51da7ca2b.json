{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Liliya\\\\Desktop\\\\frontend\\\\simple-blog\\\\pages\\\\posts\\\\[id].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin: 0 auto;\\n  max-width: 1040px;\\n  width: 100%;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useRouter } from 'next/router';\nimport useSWR from 'swr';\nimport { useDispatch } from 'react-redux';\nimport { withRedux } from '../../lib/redux';\nimport { types } from '../../store/posts';\nimport styled from 'styled-components';\nimport Layout from '../../components/Layout';\nvar Container = styled.div(_templateObject());\n\nvar fetcher = function fetcher(url) {\n  var res, data;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n\n          if (!(res.status !== 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(data.message);\n\n        case 8:\n          return _context.abrupt(\"return\", data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nfunction Post() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useSWR = useSWR(function () {\n    return query.id && \"/api/posts/\".concat(query.id);\n  }, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, error.message);\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }\n  }, \"Loading...\");\n\n  if (data) {\n    var dispatch = useDispatch();\n    dispatch({\n      type: types.GET_POST,\n      payload: data\n    });\n  }\n\n  return __jsx(Layout, {\n    title: \"Id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, __jsx(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, \"ID\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"TITLE\"), __jsx(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, \"BODY\"))), __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }, data.id), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, data.title), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, data.body)))));\n}\n\nexport default withRedux(Post);","map":{"version":3,"sources":["C:/Users/Liliya/Desktop/frontend/simple-blog/pages/posts/[id].js"],"names":["useRouter","useSWR","useDispatch","withRedux","types","styled","Layout","Container","div","fetcher","url","fetch","res","json","data","status","Error","message","Post","query","id","error","dispatch","type","GET_POST","payload","title","body"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,IAAMC,SAAS,GAAGF,MAAM,CAACG,GAAV,mBAAf;;AAMA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACIC,KAAK,CAACD,GAAD,CADT;;AAAA;AACRE,UAAAA,GADQ;AAAA;AAAA,2CAEKA,GAAG,CAACC,IAAJ,EAFL;;AAAA;AAERC,UAAAA,IAFQ;;AAAA,gBAIVF,GAAG,CAACG,MAAJ,KAAe,GAJL;AAAA;AAAA;AAAA;;AAAA,gBAKN,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CALM;;AAAA;AAAA,2CAOPH,IAPO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAUA,SAASI,IAAT,GAAgB;AAAA,mBACIlB,SAAS,EADb;AAAA,MACNmB,KADM,cACNA,KADM;;AAAA,gBAEUlB,MAAM,CAC5B;AAAA,WAAMkB,KAAK,CAACC,EAAN,yBAA0BD,KAAK,CAACC,EAAhC,CAAN;AAAA,GAD4B,EAE5BX,OAF4B,CAFhB;AAAA,MAENK,IAFM,WAENA,IAFM;AAAA,MAEAO,KAFA,WAEAA,KAFA;;AAOd,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,KAAK,CAACJ,OAAZ,CAAP;AACX,MAAI,CAACH,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;;AAEX,MAAIA,IAAJ,EAAU;AACR,QAAMQ,QAAQ,GAAGpB,WAAW,EAA5B;AACAoB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEnB,KAAK,CAACoB,QADL;AAEPC,MAAAA,OAAO,EAAEX;AAFF,KAAD,CAAR;AAID;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,CADF,CADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACM,EAAV,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKN,IAAI,CAACY,KAAV,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKZ,IAAI,CAACa,IAAV,CAHF,CADF,CARF,CADF,CADF;AAoBD;;AAED,eAAexB,SAAS,CAACe,IAAD,CAAxB","sourcesContent":["import { useRouter } from 'next/router';\r\nimport useSWR from 'swr';\r\nimport { useDispatch } from 'react-redux';\r\nimport { withRedux } from '../../lib/redux';\r\nimport { types } from '../../store/posts';\r\nimport styled from 'styled-components';\r\nimport Layout from '../../components/Layout';\r\n\r\nconst Container = styled.div`\r\n  margin: 0 auto;\r\n  max-width: 1040px;\r\n  width: 100%;\r\n`;\r\n\r\nconst fetcher = async (url) => {\r\n  const res = await fetch(url);\r\n  const data = await res.json();\r\n\r\n  if (res.status !== 200) {\r\n    throw new Error(data.message);\r\n  }\r\n  return data;\r\n};\r\n\r\nfunction Post() {\r\n  const { query } = useRouter();\r\n  const { data, error } = useSWR(\r\n    () => query.id && `/api/posts/${query.id}`,\r\n    fetcher\r\n  );\r\n\r\n  if (error) return <div>{error.message}</div>;\r\n  if (!data) return <div>Loading...</div>;\r\n\r\n  if (data) {\r\n    const dispatch = useDispatch();\r\n    dispatch({\r\n      type: types.GET_POST,\r\n      payload: data,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Layout title=\"Id\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>TITLE</th>\r\n            <th>BODY</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td>{data.id}</td>\r\n            <td>{data.title}</td>\r\n            <td>{data.body}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default withRedux(Post);\r\n"]},"metadata":{},"sourceType":"module"}